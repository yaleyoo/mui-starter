{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: {}\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    }\n  }\n});\nexport default userSlice.reducer;\nexport const {\n  setUser\n} = userSlice.actions;\nexport const getBookings = conditions => async dispatch => {\n  //   let bookings = await SvcGetBookings(conditions);\n  //   let uids = new Set();\n  //   bookings.forEach(b => {\n  //     uids.add(b.provider_uid);\n  //   });\n  //   uids.forEach(u => dispatch(getProviderByUID(u)));\n  //   dispatch(setBookings(bookings));\n};\n\n// export const selectCurrentBookings = createSelector(\n//   state => state.booking.bookings,\n//   bookings => {\n//     return bookings.filter(v => new Date(TransferSlotIdToDateAndTime((v.detail.slot_id)?.toString())) >new Date());\n//   }\n// );\n// export const selectPastBookings = createSelector(\n//   state => state.booking.bookings,\n//   bookings => {\n//     return bookings.filter(v => new Date(TransferSlotIdToDateAndTime((v.detail.slot_id)?.toString())) <= new Date());\n//   }\n// );","map":{"version":3,"names":["createSlice","createSelector","userSlice","name","initialState","user","reducers","setUser","state","action","payload","reducer","actions","getBookings","conditions","dispatch"],"sources":["/Users/steve.guo/Desktop/code-lib/mui-starter/src/slices/UserSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: {}\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    }\n  }\n});\nexport default userSlice.reducer;\n\nexport const { setUser } = userSlice.actions;\n\nexport const getBookings = (conditions) => async dispatch => {\n//   let bookings = await SvcGetBookings(conditions);\n//   let uids = new Set();\n//   bookings.forEach(b => {\n//     uids.add(b.provider_uid);\n//   });\n//   uids.forEach(u => dispatch(getProviderByUID(u)));\n//   dispatch(setBookings(bookings));\n};\n\n// export const selectCurrentBookings = createSelector(\n//   state => state.booking.bookings,\n//   bookings => {\n//     return bookings.filter(v => new Date(TransferSlotIdToDateAndTime((v.detail.slot_id)?.toString())) >new Date());\n//   }\n// );\n// export const selectPastBookings = createSelector(\n//   state => state.booking.bookings,\n//   bookings => {\n//     return bookings.filter(v => new Date(TransferSlotIdToDateAndTime((v.detail.slot_id)?.toString())) <= new Date());\n//   }\n// );\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,UAAU;AAEzC,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACnCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE,CAAC;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACH,IAAI,GAAGI,MAAM,CAACC,OAAO;IAC7B;EACF;AACF,CAAC,CAAC;AACF,eAAeR,SAAS,CAACS,OAAO;AAEhC,OAAO,MAAM;EAAEJ;AAAQ,CAAC,GAAGL,SAAS,CAACU,OAAO;AAE5C,OAAO,MAAMC,WAAW,GAAIC,UAAU,IAAK,MAAMC,QAAQ,IAAI;EAC7D;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}