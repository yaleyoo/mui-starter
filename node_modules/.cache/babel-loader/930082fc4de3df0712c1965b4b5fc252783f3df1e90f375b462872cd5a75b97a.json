{"ast":null,"code":"\"use client\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from \"react\";\nimport { objectFromEntries } from \"./tools/polyfills/Object.fromEntries\";\nimport { objectKeys } from \"./tools/objectKeys\";\nimport { createUseCssAndCx } from \"./cssAndCx\";\nimport { getDependencyArrayRef } from \"./tools/getDependencyArrayRef\";\nimport { typeGuard } from \"./tools/typeGuard\";\nimport { assert } from \"./tools/assert\";\nimport { mergeClasses } from \"./mergeClasses\";\nimport { createContext, useContext } from \"react\";\nimport { __unsafe_useEmotionCache as useContextualCache } from \"@emotion/react\";\nlet counter = 0;\nexport function createMakeStyles(params) {\n  const {\n    useTheme,\n    cache: cacheProvidedAtInception\n  } = params;\n  function useCache() {\n    const contextualCache = useContextualCache();\n    const cacheExplicitlyProvidedForTss = useCacheProvidedByProvider();\n    const cacheToBeUsed = cacheProvidedAtInception ?? cacheExplicitlyProvidedForTss ?? contextualCache;\n    if (cacheToBeUsed === null) {\n      throw new Error([\"In order to get SSR working with tss-react you need to explicitly provide an Emotion cache.\", \"MUI users be aware: This is not an error strictly related to tss-react, with or without tss-react,\", \"MUI needs an Emotion cache to be provided for SSR to work.\", \"Here is the MUI documentation related to SSR setup: https://mui.com/material-ui/guides/server-rendering/\", \"TSS provides helper that makes the process of setting up SSR easier: https://docs.tss-react.dev/ssr\"].join(\"\\n\"));\n    }\n    return cacheToBeUsed;\n  }\n  const {\n    useCssAndCx\n  } = createUseCssAndCx({\n    useCache\n  });\n  /** returns useStyle. */\n  function makeStyles(params) {\n    const {\n      name: nameOrWrappedName,\n      uniqId = counter++\n    } = params ?? {};\n    const name = typeof nameOrWrappedName !== \"object\" ? nameOrWrappedName : Object.keys(nameOrWrappedName)[0];\n    return function (cssObjectByRuleNameOrGetCssObjectByRuleName) {\n      const getCssObjectByRuleName = typeof cssObjectByRuleNameOrGetCssObjectByRuleName === \"function\" ? cssObjectByRuleNameOrGetCssObjectByRuleName : () => cssObjectByRuleNameOrGetCssObjectByRuleName;\n      return function useStyles(params, styleOverrides) {\n        const theme = useTheme();\n        const {\n          css,\n          cx\n        } = useCssAndCx();\n        const cache = useCache();\n        let classes = useMemo(() => {\n          const refClassesCache = {};\n          const refClasses = typeof Proxy !== \"undefined\" && new Proxy({}, {\n            \"get\": (_target, propertyKey) => {\n              if (typeof propertyKey === \"symbol\") {\n                assert(false);\n              }\n              return refClassesCache[propertyKey] = `${cache.key}-${uniqId}${name !== undefined ? `-${name}` : \"\"}-${propertyKey}-ref`;\n            }\n          });\n          const cssObjectByRuleName = getCssObjectByRuleName(theme, params, refClasses || {});\n          const classes = objectFromEntries(objectKeys(cssObjectByRuleName).map(ruleName => {\n            const cssObject = cssObjectByRuleName[ruleName];\n            if (!cssObject.label) {\n              cssObject.label = `${name !== undefined ? `${name}-` : \"\"}${ruleName}`;\n            }\n            return [ruleName, `${css(cssObject)}${typeGuard(ruleName, ruleName in refClassesCache) ? ` ${refClassesCache[ruleName]}` : \"\"}`];\n          }));\n          objectKeys(refClassesCache).forEach(ruleName => {\n            if (ruleName in classes) {\n              return;\n            }\n            classes[ruleName] = refClassesCache[ruleName];\n          });\n          return classes;\n        }, [cache, css, cx, theme, getDependencyArrayRef(params)]);\n        const propsClasses = styleOverrides?.props.classes;\n        classes = useMemo(() => mergeClasses(classes, propsClasses, cx), [classes, getDependencyArrayRef(propsClasses), cx]);\n        {\n          let cssObjectByRuleNameOrGetCssObjectByRuleName = undefined;\n          try {\n            cssObjectByRuleNameOrGetCssObjectByRuleName = name !== undefined ? theme.components?.[name]?.styleOverrides : undefined;\n            // eslint-disable-next-line no-empty\n          } catch {}\n          const themeClasses = useMemo(() => {\n            if (!cssObjectByRuleNameOrGetCssObjectByRuleName) {\n              return undefined;\n            }\n            const themeClasses = {};\n            for (const ruleName in cssObjectByRuleNameOrGetCssObjectByRuleName) {\n              const cssObjectOrGetCssObject = cssObjectByRuleNameOrGetCssObjectByRuleName[ruleName];\n              if (!(cssObjectOrGetCssObject instanceof Object)) {\n                continue;\n              }\n              themeClasses[ruleName] = css(typeof cssObjectOrGetCssObject === \"function\" ? cssObjectOrGetCssObject({\n                theme,\n                \"ownerState\": styleOverrides?.ownerState,\n                ...styleOverrides?.props\n              }) : cssObjectOrGetCssObject);\n            }\n            return themeClasses;\n          }, [cssObjectByRuleNameOrGetCssObjectByRuleName === undefined ? undefined : JSON.stringify(cssObjectByRuleNameOrGetCssObjectByRuleName), getDependencyArrayRef(styleOverrides?.props), getDependencyArrayRef(styleOverrides?.ownerState), css]);\n          classes = useMemo(() => mergeClasses(classes, themeClasses, cx), [classes, themeClasses, cx]);\n        }\n        return {\n          classes,\n          theme,\n          css,\n          cx\n        };\n      };\n    };\n  }\n  function useStyles() {\n    const theme = useTheme();\n    const {\n      css,\n      cx\n    } = useCssAndCx();\n    return {\n      theme,\n      css,\n      cx\n    };\n  }\n  return {\n    makeStyles,\n    useStyles\n  };\n}\nconst reactContext = createContext(undefined);\nfunction useCacheProvidedByProvider() {\n  const cacheExplicitlyProvidedForTss = useContext(reactContext);\n  return cacheExplicitlyProvidedForTss;\n}\nexport function TssCacheProvider(props) {\n  const {\n    children,\n    value\n  } = props;\n  return React.createElement(reactContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"names":["React","useMemo","objectFromEntries","objectKeys","createUseCssAndCx","getDependencyArrayRef","typeGuard","assert","mergeClasses","createContext","useContext","__unsafe_useEmotionCache","useContextualCache","counter","createMakeStyles","params","useTheme","cache","cacheProvidedAtInception","useCache","contextualCache","cacheExplicitlyProvidedForTss","useCacheProvidedByProvider","cacheToBeUsed","Error","join","useCssAndCx","makeStyles","name","nameOrWrappedName","uniqId","Object","keys","cssObjectByRuleNameOrGetCssObjectByRuleName","getCssObjectByRuleName","useStyles","styleOverrides","theme","css","cx","classes","refClassesCache","refClasses","Proxy","get","_target","propertyKey","key","undefined","cssObjectByRuleName","map","ruleName","cssObject","label","forEach","propsClasses","props","components","themeClasses","cssObjectOrGetCssObject","ownerState","JSON","stringify","reactContext","TssCacheProvider","children","value","createElement","Provider"],"sources":["/Users/steve.guo/Desktop/code-lib/mui-starter/node_modules/tss-react/esm/makeStyles.js"],"sourcesContent":["\"use client\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo } from \"react\";\nimport { objectFromEntries } from \"./tools/polyfills/Object.fromEntries\";\nimport { objectKeys } from \"./tools/objectKeys\";\nimport { createUseCssAndCx } from \"./cssAndCx\";\nimport { getDependencyArrayRef } from \"./tools/getDependencyArrayRef\";\nimport { typeGuard } from \"./tools/typeGuard\";\nimport { assert } from \"./tools/assert\";\nimport { mergeClasses } from \"./mergeClasses\";\nimport { createContext, useContext } from \"react\";\nimport { __unsafe_useEmotionCache as useContextualCache } from \"@emotion/react\";\nlet counter = 0;\nexport function createMakeStyles(params) {\n    const { useTheme, cache: cacheProvidedAtInception } = params;\n    function useCache() {\n        const contextualCache = useContextualCache();\n        const cacheExplicitlyProvidedForTss = useCacheProvidedByProvider();\n        const cacheToBeUsed = cacheProvidedAtInception ??\n            cacheExplicitlyProvidedForTss ??\n            contextualCache;\n        if (cacheToBeUsed === null) {\n            throw new Error([\n                \"In order to get SSR working with tss-react you need to explicitly provide an Emotion cache.\",\n                \"MUI users be aware: This is not an error strictly related to tss-react, with or without tss-react,\",\n                \"MUI needs an Emotion cache to be provided for SSR to work.\",\n                \"Here is the MUI documentation related to SSR setup: https://mui.com/material-ui/guides/server-rendering/\",\n                \"TSS provides helper that makes the process of setting up SSR easier: https://docs.tss-react.dev/ssr\"\n            ].join(\"\\n\"));\n        }\n        return cacheToBeUsed;\n    }\n    const { useCssAndCx } = createUseCssAndCx({ useCache });\n    /** returns useStyle. */\n    function makeStyles(params) {\n        const { name: nameOrWrappedName, uniqId = counter++ } = params ?? {};\n        const name = typeof nameOrWrappedName !== \"object\"\n            ? nameOrWrappedName\n            : Object.keys(nameOrWrappedName)[0];\n        return function (cssObjectByRuleNameOrGetCssObjectByRuleName) {\n            const getCssObjectByRuleName = typeof cssObjectByRuleNameOrGetCssObjectByRuleName ===\n                \"function\"\n                ? cssObjectByRuleNameOrGetCssObjectByRuleName\n                : () => cssObjectByRuleNameOrGetCssObjectByRuleName;\n            return function useStyles(params, styleOverrides) {\n                const theme = useTheme();\n                const { css, cx } = useCssAndCx();\n                const cache = useCache();\n                let classes = useMemo(() => {\n                    const refClassesCache = {};\n                    const refClasses = typeof Proxy !== \"undefined\" &&\n                        new Proxy({}, {\n                            \"get\": (_target, propertyKey) => {\n                                if (typeof propertyKey === \"symbol\") {\n                                    assert(false);\n                                }\n                                return (refClassesCache[propertyKey] = `${cache.key}-${uniqId}${name !== undefined ? `-${name}` : \"\"}-${propertyKey}-ref`);\n                            }\n                        });\n                    const cssObjectByRuleName = getCssObjectByRuleName(theme, params, refClasses || {});\n                    const classes = objectFromEntries(objectKeys(cssObjectByRuleName).map(ruleName => {\n                        const cssObject = cssObjectByRuleName[ruleName];\n                        if (!cssObject.label) {\n                            cssObject.label = `${name !== undefined ? `${name}-` : \"\"}${ruleName}`;\n                        }\n                        return [\n                            ruleName,\n                            `${css(cssObject)}${typeGuard(ruleName, ruleName in refClassesCache)\n                                ? ` ${refClassesCache[ruleName]}`\n                                : \"\"}`\n                        ];\n                    }));\n                    objectKeys(refClassesCache).forEach(ruleName => {\n                        if (ruleName in classes) {\n                            return;\n                        }\n                        classes[ruleName] =\n                            refClassesCache[ruleName];\n                    });\n                    return classes;\n                }, [cache, css, cx, theme, getDependencyArrayRef(params)]);\n                const propsClasses = styleOverrides?.props.classes;\n                classes = useMemo(() => mergeClasses(classes, propsClasses, cx), [classes, getDependencyArrayRef(propsClasses), cx]);\n                {\n                    let cssObjectByRuleNameOrGetCssObjectByRuleName = undefined;\n                    try {\n                        cssObjectByRuleNameOrGetCssObjectByRuleName =\n                            name !== undefined\n                                ? theme.components?.[name]\n                                    ?.styleOverrides\n                                : undefined;\n                        // eslint-disable-next-line no-empty\n                    }\n                    catch { }\n                    const themeClasses = useMemo(() => {\n                        if (!cssObjectByRuleNameOrGetCssObjectByRuleName) {\n                            return undefined;\n                        }\n                        const themeClasses = {};\n                        for (const ruleName in cssObjectByRuleNameOrGetCssObjectByRuleName) {\n                            const cssObjectOrGetCssObject = cssObjectByRuleNameOrGetCssObjectByRuleName[ruleName];\n                            if (!(cssObjectOrGetCssObject instanceof Object)) {\n                                continue;\n                            }\n                            themeClasses[ruleName] = css(typeof cssObjectOrGetCssObject === \"function\"\n                                ? cssObjectOrGetCssObject({\n                                    theme,\n                                    \"ownerState\": styleOverrides?.ownerState,\n                                    ...styleOverrides?.props\n                                })\n                                : cssObjectOrGetCssObject);\n                        }\n                        return themeClasses;\n                    }, [\n                        cssObjectByRuleNameOrGetCssObjectByRuleName ===\n                            undefined\n                            ? undefined\n                            : JSON.stringify(cssObjectByRuleNameOrGetCssObjectByRuleName),\n                        getDependencyArrayRef(styleOverrides?.props),\n                        getDependencyArrayRef(styleOverrides?.ownerState),\n                        css\n                    ]);\n                    classes = useMemo(() => mergeClasses(classes, themeClasses, cx), [classes, themeClasses, cx]);\n                }\n                return {\n                    classes,\n                    theme,\n                    css,\n                    cx\n                };\n            };\n        };\n    }\n    function useStyles() {\n        const theme = useTheme();\n        const { css, cx } = useCssAndCx();\n        return { theme, css, cx };\n    }\n    return { makeStyles, useStyles };\n}\nconst reactContext = createContext(undefined);\nfunction useCacheProvidedByProvider() {\n    const cacheExplicitlyProvidedForTss = useContext(reactContext);\n    return cacheExplicitlyProvidedForTss;\n}\nexport function TssCacheProvider(props) {\n    const { children, value } = props;\n    return (React.createElement(reactContext.Provider, { value: value }, children));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}